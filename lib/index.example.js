// Generated by CoffeeScript 1.10.0
(function() {
  var Teambition, exports, querystring, request;

  request = require('request');

  querystring = require('querystring');

  Teambition = (function() {
    Teambition.prototype.protocol = 'https';

    Teambition.prototype.host = 'api.teambition.com';

    Teambition.prototype.authHost = 'account.teambition.com';

    function Teambition(token, config) {
      this.token = token;
      if (config == null) {
        config = {};
      }
      if (config.host) {
        this.host = config.host;
      }
      if (config.authHost) {
        this.authHost = config.authHost;
      }
      if (config.protocol) {
        this.protocol = config.protocol;
      }
    }

    Teambition.prototype.getAuthorizeUrl = function(client_id, redirect_uri, state) {
      var qs;
      qs = querystring.stringify({
        client_id: client_id,
        redirect_uri: redirect_uri,
        state: state
      });
      return this.protocol + "://" + this.authHost + "/oauth2/authorize?" + qs;
    };

    Teambition.prototype.getAccessTokenUrl = function() {
      return this.protocol + "://" + this.authHost + "/oauth2/access_token";
    };

    Teambition.prototype.authCallback = function(client_id, client_secret) {
      var self;
      self = this;
      return function(req, res, next) {
        var api, code;
        code = req.query.code;
        api = self.getAccessTokenUrl();
        return self.post(api, {
          client_id: client_id,
          client_secret: client_secret,
          code: code
        }, function(err, body) {
          req.callbackBody = body;
          return next();
        });
      };
    };

    Teambition.prototype.invokeGeneric = function(method, apiURL, params, callback) {
      var headers, options;
      if (typeof params === 'function') {
        callback = params;
        params = {};
      }
      params || (params = {});
      if (apiURL.indexOf('/') === 0) {
        apiURL = this.protocol + "://" + this.host + apiURL;
      }
      headers = {
        'Content-Type': 'application/json'
      };
      if (this.token) {
        headers["Authorization"] = "OAuth2 " + this.token;
      }
      if (params.headers) {
        headers = params.headers;
        delete params.headers;
      }
      options = {
        method: method,
        headers: headers,
        url: apiURL,
        json: true
      };
      if (method.toLowerCase() !== 'get') {
        options.form = params;
      } else {
        options.qs = params;
      }
      return request(options, function(err, resp, body) {
        if (err || resp && resp.statusCode !== 200) {
          err || (err = body);
        }
        return callback(err, body);
      });
    };

    Teambition.prototype.api = function(apiURL, params, callback) {
      return this.invokeGeneric('GET', apiURL, params, callback);
    };

    Teambition.prototype.get = function() {
      return this.api.apply(this, arguments);
    };

    Teambition.prototype.post = function(apiURL, params, callback) {
      return this.invokeGeneric('POST', apiURL, params, callback);
    };

    Teambition.prototype.put = function(apiURL, params, callback) {
      return this.invokeGeneric('PUT', apiURL, params, callback);
    };

    Teambition.prototype.del = function(apiURL, params, callback) {
      return this.invokeGeneric('DELETE', apiURL, params, callback);
    };

    return Teambition;

  })();

  exports = module.exports = Teambition;

}).call(this);
